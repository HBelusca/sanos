TODO for sanos
--------------

- Use the BIOS memory map from osldr to initialize memory subsystem.

- Finish implementation of APM support. This would allow sanos to turn off the
  computer on shutdown. Eventually, shutdown could be implemented only
  enabling APM just before shutdown.
 
- Move signal handler table to job object to make signal handlers job specific. 
    - Add job number to kill. 
    - Implement int kill(int pid, int signum)
    - Return job number in getpid()

- Change control87() to use the MSVCRT definitions of FPU control flags.

- Implement 48-bit LBA support in IDE driver

- Add read-only attribute to dfs

- Improve sysalloc() in heap.c to enable dynamic expansion of wilderness region.

- Implement UDMA mode for ATAPI devices

- Replace syslog() in sysapi.c with:
    int vsyslog(int syscallno, va_list params);
    int syslog(int syscallno, ...);

- Keyboard locks up when pressing CAPSLOCK
    - Check ext flags in processing modifier keys (shift, alt, etc.)
 
- Implement ICMP messages host unreachable, net unreachable and port unreachable

- Finish implementation of NDIS subsystem

- Add support for shared interrupts to driver isr handlers

- Use bitmap for port number handling

- Multicast filtering support in network drivers

- Implement mremap() and use it in heap.c for realloc() of large blocks

- Implement krealloc() in kmalloc.c

- Handle reopening of files in smbfs after reconnect
  
- What happens if a tcp pcb is freed in tcp_input() while sending segments on another socket in tcp_output()?

IDEAS for new features
----------------------

- Vulnerability test with Nessus

- dfs version 2
    - Large file support
    - Support for mode flags (drwxrwxrwx)
    - Support for owner and group

- Use type object in struct object

- String substitution in inf files
    - Replace all ${key} with value in [strings] section
    - Support merging of ini files

- sysctl() functionality

- DNS resolver cache

- Dynamic DNS registration

- Multiple consoles (switch consoles with ALT-<num>)

- DOS boot loader

- FATFS support

- ACPI/APM support for shutdown

- Memory paging support


CHANGES
-------

- Implement /proc/uptime to display time since bootup.

- Add readline() with command line editing
    - Add command history
    - Add filename completion

- Support for .exe applications in msvcrt.dll

- Script action moved to script section in setup.exe

- Remove safety pool code in pframe.c

- Add tags to page frame database to identify memory usage
    - Add /proc/memusage

- Rename /os to /bin

- SO_BROADCAST implemented

- Map network errors with winsock errors.
    - Add all winsock errors to error table
    - Add error strings to strerror()
    - Update error codes in network code
    - Map winsock errors in wsock32.c
    - Go through each Winsock error and check net code for compliance

- Implemented main entry in libc with parseargs

- Fixed bug in TCP retransmission

- Make ne2000 driver work with WAFER.

- Return info on WSAStartup

- Moved netif binding to os.c
    - Read netif parameters from [netif] in os.ini
    - Allow static configuration of ip address and dns servers
    - Add disabled netif for all packet devices on startup
    - Add ioctl() support for changing netif parameters

- Added alloc_linear_pageframes() and alloc_pages_linear() for
  allocating linear physical memory blocks.
  
- RTL8139 network driver implemented (rtl8139.sys)

- Added PCI subsystem identifier to driver binding code.

- Implemented Intel EtherExpress Pro100 NIC network driver (eepro100.sys)

- Implemented lock count on objects
    - close object when handle count reaches zero.
    - destroy object when handle count and refcnt reaches zero.

- Buffer leak in devfs set_inode_block() fixed.

- Support for lseek() beyond end of file in dfs and smbfs.

- Bug in register_interrupt_handler() caused kernel to hang on startup. This
  problem has been fixed.
  
- Support for lba mode for hd boot in osldr

- Keyboard interrupt handling has been made more robust (failed on xpc).

- sendmsg() and recvmsg() added

*** version 1.2.4 released ***

- iomux kernel syncronization objects implemented

- select() implemented

- Support for building with Visual Studio 6.

- setjmp/longjmp moved from msvcrt to libc

- Exceptions with signal() and raise() implemented

- Revalidate partition drivers after fdisk

- Bug in FPU context handling fixed

- strftime() implemented

- Bug loading DLL with no imports fixed

- recv() call hangs when reading from a TCP socket which have been cloed by remote peer. This problem has
  been fixed. recv() now returns -ECONNRESET.

*** version 1.2.5 released ***

- iomux did not work with IOEVT_WRITE. This problem has been fixed.

- getsockname() returned garbage in sin_port and sin_addr. This problem has been fixed.

- getpeername() retunred garbage in sin_addr. This problem has been fixed.

- new HTTP server

- PE resource api

- Threads are now resceduled after setprio() to immediately reflect the new thread priority

- New sis900 network driver

- ls reported wrong size for files larger than 1GB. This problem has been fixed.

- NIC support for multicast filtering. Implemented in sis900 and rtl8139. 
  Not yet implemented in network stack.

- /dev/cmos renamed to /dev/nvram

- ether_crc() moved to src\net\ether.c

- struct stats_nic moved to include\net\stats.h

- lookup_board() implemented in dev.c

- pci_{read|write}_config_{byte|word|dword} implemeted in pci.c

- Proper handling of kernel traps. Now enters debugger with correct exception.

*** version 1.2.6 released ***

- When a file or socket object was closed the kernel object was accessed in hfree() after being freed. 
  The file and socket objects are now freed in destroy_object() to avoid this problem.

- Handles to kernel objects was not removed from the handle table if the handle count 
  was greater than one. This problem has been fixed.
  
- Closing a socket now sends a IOEVT_CLOSE event to attached iomux. This signals a select()
  on a socket to return when one of the read sockets are being closed by the application.
  
- File was marked as modified when using futime() with dfs. This was overwriting the mtime 
  for the inode when the file was closed. Now the inode is just marked dirty.

- Floppy device was not detected unless floppy disk was inserted. This problem has been fixed
  by delaying initialization of fdc until first use.

- Added queue to loopback adapter.

- The yield() routine now discards the remaining quantum for the thread before yielding.

- Loopback packets to own address are now redirected in ether_output().

- In syscall() in kernel the error code from system calls was set in the err field in the tib. This
  overwrote the stderr handle for the thread. Now the errnum field is correctly set in the tib.

- Garbage returned by WSAGetLastError() because tib->err was mistakenly used instead of tib->errnum. This
  has been fixed.

- The value of errno is now the positive version of the error number instead of the negative.

- dup2(), creat(), sopen(), umask(), eof(), and access() added.

- File sharing, permission mode and additional open flags (O_TEMPORARY, O_SHORT_LIVED, O_DIRECT,
  O_SEQUENTIAL, O_RANDOM) implemented for smbfs.

- Temporary files added to dfs (O_TEMPORARY flag in open()).

- tell() did not correctly return the file position. It just flushed the file. This has been fixed and
  tell() now returns the file position.

- vfs and smbfs now supports large files (>2GB).

- stat64(), fstat64(), tell64(), lseek64() and chsize64() added to os interface.

- stat() and fstat() changed to conform to ANSI standard.

- Modified signal() and raise to conform to ANSI standard. Signal info can be obtained
  in signal handler by using getsiginfo(). The sendsig() function can be used to raise
  signals with context info.

- Support for 64 bit integer arithmetic. All compiler support routines for 64 bit
  integer operations implemented in libc.

- CreateFile() and SetFileTime() implemented in kernel32.

- WIN32 structured exception handling implemented in kernel32. When kernel32 is loaded it 
  takes over the global signal handler and dispatches the exceptions in the exception 
  chain in the TIB.

- MSVCRT exception handling implemented.

- setcontext() implemented.

- Added more complete ANSI Standard C Library. Many standard header files has been added to the include
  directory (conio.h, errno.h, fcntl.h, float.h, io.h, malloc.h, math.h, memory.h, process.h, share.h, signal.h,
  stddef.h, sys/types.h, unistd.h), and prototypes has been moved to their ANSI specified standard headers.

- The thread ready queues could become corrupted if a thread that was already ready was marked
  ready again. This could lead to kernel traps in the object manager because of faulty dispatching
  of threads. This problem has been fixed, by linking the threads on the ready queues in double
  linked lists and introducing new thread states. Now only threads in ready state are in the
  ready queues.

- Added job object to group threads executing an application. The CREATE_NEW_JOB flags can be used in beginthread()
  to start a new job. The spawn() function can be used to start an application in a new job.

- /dev/random and /dev/urandom devices added.

- BSD style random number functions added to lib.

- New stdio implementation with buffering, unget, and support for printf and scanf processing.

- C/C++ initializers and terminators are now processed by the crt startup/shutdown code include atexit() handlers.

- Math routines using the i387 instruction set added to standard C library (acos, asin, atan, atan2, ceil, cos,
  cosh, exp, fabs, floor, fmod, frexp, ldexp, log, log10, modf, pow, sin, sinh, sqrt, tan, tanh).

- abort() now raises SIGABRT.

- div(), labs(), ldiv(), and system() added to stdlib.c.

- memccpy(), memicmp(), strset() added to string.c.

- strtod() and atof() implemented.

- asctime(), _ctime(), _strdate(), _strtime() added to time.c.

- /proc/bufstat added to buffer cache manager to show statistic for the buffer cache.

- Previously the exit() stopped the user mode code and shutdown the kernel. The exit() routine now exits the
  currently executing job. The exitos() routine now shuts down the kernel.

- Support for O_TEXT and O_BINARY flags added to vsf.c.

- connect() failed for local sockets. This problem has been fixed.

- calloc() reported out of memory if num was zero. This problem has been fixed.

*** version 1.2.7 released ***

- Garbage was outputted when printing negative numbers using printf. This problem has been fixed.

- lseek() failed with -EINVAL when seeking on a device larger than 2GB. This prevented fdisk from working on
  disks larger than 2GB. This problem has been fixed.

- The fddone flag in bootfd.c has been marked volatile to prevent optimization of interrupt wait loop.

*** version 1.2.8 released ***

- New mkfloppy utility for writing raw floppy disks.

- TCP connections are now reset before kernel shutdown or reboot.

- Serial transmitter could hang. Interrupts are now disabled when draining the transmit
  queue to prevent race condition with interrupt service routine. The transmitter is now
  started directly by the write routine. Previosly the transmitter was started by the DPC.
  The interrupt service routines now also checks for multiple interrupt indication per 
  interrupt.

- Visual Studio wizard for creating sanos application projects.

- Scheduler enhancements
    - Number of thread priorities changed from 8 to 32
    - Scheduler now uses a thread ready summary to determine next thead to run
    - Win32 thread priority mapping changed to new 32 level priority system based
      of normal priority class mapping.
    - User mode code only allowed to set priority levels 1-15
    - User mode code not allowed to change priority for kernel threads
    - Dynamic and base priority for threads implemented
    - Priority boosting implemented
    - Quantum units are now charged after restarting waiting thread
    - Preemption when threads with higher priority than running thread implemented
 
- TCP port numbers initialized to random range 4096-5120.

- Processor load information (/proc/loadavg) implemented.
 
- Shell code cleaned up. Help texts added. Better argument checking.

- Buffer overflows fixed in module loader
 
- Send and receive timeouts (SO_SNDTIMEO and SO_RCVTIMEO in setsockopt()) implemented for TCP sockets.

*** version 1.2.9 released ***

- cd support added to ide driver

- cdfs iso9660 filesystem implemented

- SetFilePointer() implemented in kernel32

- kbhit() and putch() implemented in conio.c

- setjmp() did not return the correct value from longjmp(). This problem has been fixed.

- Intrinsic fmod function (_CIfmod) implemented.

- The stdin, stdout and stderr macros in stdio.h required os.h to be included to define
  the job structure. This is no longer needed. The standard files are now resolved using
  the __stdhndl() function in the stdio library.

- mode parameter added to mkdir() for ANSI conformance.

- chmod() and fchmod() system calls implemented. No file systems yet implement these.

- The user time for /proc/loadavg was counted as dpc time. This problem has been fixed.

- sysinfo() implemented. GetSystemInfo() and GlobalMemoryStatus() in kernel32 now returns
  correct values.

- Code cleanup in msvcrt.h. All exports moved to msvcrt.def.

- TCP keep-alive packets was not acknowledged correctly. This could lead to connections 
  where the peer had KEEPALIVE enabled to be terminated after long periods of no activity. 
  This problem has been fixed by also sending an acknowledge for TCP segments that fall 
  outside the current window.

- Changes from lwIP 0.6.4 added to networking code:
  - Check for short packets in icmp.
  - ICMP transmit buffer changed to PBUF_IP.
  - ip_id in ip_output_if() changed to static.
  - Checksum folded into 16-bit in chksum().
  - The TCP retransmission time-out backoff corrected. 
  - Segments in ooseq, unacked and unsent are now removed on abort.
  - Check for pcb already in listen mode in tcp_listen().
  - TCP retransmission of unacknowled segments moved to tcp_rexmit().
  - The snd_wl1 was not initialized correctly.
  - If accept fails in SYN_RECVD, EABORT is retuned to prevent further processing of pcb.
  - Segments on unacked now removed before segments on the unsent list
  - Now also sending an acknowledge for TCP segments that fall outside the current window.
  - Only direct UDP packets which does not match perfectly to unconnected pcbs.
  - Check for short packets in udp.

*** version 1.2.9.1 released (03/11/11) ***

- Support for kernel options supplied by the loader added. The kernel options are 
  embedded in the loader. The mkdfs utility now have a -K option to set kernel options 
  for a bootable image. The setup utility has been updated to allow kernel options to
  be specified in the sysprep section.

- The ide device driver now supports the ideprobe kernel option to disable probing of
  ide devices. When ideprobe=0 the BIOS settings are used to determine the number of
  disks.

*** version 1.2.9.2 released (03/11/12) ***

- Renamed format() syscall to mkfs()

- Boot from CD-ROM using El Torito implemented. The system is booted in No Emulation
  mode. The BOOTIMG.BIN contains a small DFS filesystem (512K). A special boot sector
  (cdboot) loads the secondary boot loader (osldr) from the image and starts it using 
  boot drive 0xFF. The secondary bootloader has been relocated to 0x00090000 to allow 
  the boot image to fit into low memory. It loads the kernel from the boot image and 
  starts the kernel. The kernel boots the system using the boot image (/dev/initrd) 
  as root file system. The rest of the CD is mouted on /usr to allow access to the 
  entire CD. The boot ISO image can be created using the mkisofs tool.

- Boot from network using PXE implemented.

- Escape character changed from '\' to '^' in .ini files.

- The hd driver failed to read multiple sectors per read command. This problem has been
  fixed. The status register is now read before the next sector is read in the dpc
  handler. This reenables interrupts from the IDE controller before the last byte of
  the current sector is read.

- UDMA mode disabled in IDE driver for VMware disk drives.

- File objects are now I/O objects. This is the first step in enabling selectable
  file handles, i.e. allow for using select() on file handles. While this is not very
  useful for regular files it is interesting for devices and pipes.

- Support for select() for device drivers implemented in device manager. Device drivers
  must call dev_setevt() and dev_clrevt() to signal events. A flag parameter has been
  added to dev_read() and dev_write(). This parameter is used to indicate non-blocking
  I/O operations (DEVFLAG_NBIO).

- Support for select() and non-blocking I/O for pipe file system.

- O_NONBLOCK added to flags in open() and ioctl() support for FIONBIO for file objects.

- Added job list to PEB. The jobs command in the shell can now be used to display
  all running jobs.

- The kernel startup has been changed to open only one file object for the console. Then
  three handles are allocated for the initial stdin, stdout and stderr.

- The get_option() routine failed to handle parameters without values. This problem has been
  fixed.

- system() now uses spawn() to execute new program.

- Enabled cursor on console when kbhit() is called.

- Real mode os loader initialization implemented as DOS stub for osldr.dll.  Now the 
  boot sector calls the real mode entry point in real mode. The real mode startup 
  initializes the system, enters 32-bit protected mode and calls the protected mode 
  startup routine in osldr.dll. This simplifies the boot loaders and removes the 512 byte
  limitation on real mode initialization code.

- Support for compressed boot image for initial RAM disk.

*** version 1.3.0 released (04/08/08) ***

- Added hlt to idle task to decrese CPU usage when running under VMWare (TSU).

- Added uk keyboard bindings (TSU).

- The static modifier removed from internal routines in sysapi.c to prevent
  "over-optimization" of the stack frames (TSU).

- The configuration from /etc/os.ini has been renamed from config to osconfig.

- The add_to_history() function in readline.c has is no longer static and now
  has a prototype in stdlib.h.

- The os.vcproj file has been modified to explicitly set the /GF /Gy /Oi /Ob1 flags. Now the
  project file is converted correctly to VC7.1 format (TSU).

- VT102 support in console driver

- Atomic operations added in atomic.h.

- Instance counting added in crt0.c to properly initialize/terminate the crt.

- Guard pages implemented

- Support for JDK 1.4.2

- Changed stack guard page support to comply with win32

- jinit can now load configuration from alternative ini file

- ifconfig command implemented in shell

- /proc/dhcpstat implemented.

- Bug in GetFileTimes() fixed.

- _open_osfhandle() in msvcrt leaked file handles. This has been fixed.

- Console input implemented using readline() in msvcrt.

- tempnam() added to stdio.h

- sys/utime.h added

- Self handle for thread now stored in TIB.

- Improved C++ compatibility in Standard C library. All function declarations now 
  in extern "C". The standard new and delete operator implemented.

- mkmutex() and mutexrel() implemented

- pread() and pwrite() implemented

- Intrinsic math functions implemented (acos, asin, cosh, pow, sinh, tanh).

*** version 1.3.1 released (04/10/25) ***

- The fdmotor task in the floppy driver has been replaced by a timer.

- Standard POSIX/ANSI API routines now returns -1 on error and set error code in errno 
  to comply with POSIX/ANSI standard.

- Added format option to dfs mount options to allow a device to be formated when mounting. 
  This is useful for ram disks. Also added progress option to log progress messages during
  formating of device.

- The file system now has a separate step for destroying the file object after all
  locks has been released. This should prevent race condition when reads/writes are
  pending when the file is closed. This could lead to kernel panic bacause the
  file object was destroyed while being accessed in the read/write routines.

- Changed err_tcp() in tcpsock.c to set IOEVT_CLOSE if the error code is ERST. This will
  trigger a socket in readfds in select() when the connection has been reset by the
  peer.

- Suspending all user threads when shutting down.

- Raw sockets implemented.

- Ping command added to shell

- Header files added for ANSI/POSIX compliance: netdb.h, stdint.h, uio.h, arpa/inet.h,
  netinet/in.h, netinet/tcp.h, sys/select.h, sys/socket.h

- Now stat() and fstat() only returns the length of the file if the second argument is NULL.
  Else, stat() and fstat() returns 0 on success to comply with POSIX.

- The dirent struct renamed to direntry to avoid name clash with POSIX standard. Also, the
  opendir has been renamed to _opendir, and readdir has been renamed to _readdir.

- Implemented opendir(), readdir(), rewinddir(), and closedir() according to POSIX.

- Implemented alloca() and added alloca.h header file.

- Primary path separator can now be configured in krnl.ini.

- Added realpath() to stdlib.c.

- The Visual Studio now supports extended project directory structure

- Project files now uses Release and Debug as configuration instead of SanOS and
  SanOSDebug.
  
- Port I/O definitions moved from krnl.h to iop.h
