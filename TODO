TODO for sanos
--------------

- Keyboard locks up when pressing CAPSLOCK

- Floppy driver not initialized if no floppy inserted

- Return error in tcp_rexmit_seg() to signal error in retransmit (reset rtime)

- Implement ICMP messages host unreachable, net unreachable and port unreachable

- Finish implementation of NDIS subsystem

- Add support for shared interrupts to driver isr handlers

- Use bitmap for port number handling

- Multicast filtering support in network drivers

- Implement mremap() and use it in heap.c for realloc() of large blocks

- Implement krealloc() in kmalloc.c

- Handle reopening of files in smbfs after reconnect

- Scheduler enhancements
    - Change from 8 to 32 priority levels
    - Change win32 mapping to sanos priority levels
    - Remove yields in task processing and process kernel task queues at higher priority
    - Implement priority boost in mark_thread_ready()
    - Implement ready summary for thread ready queues
    - Use NT quantum units in scheduler
    - Implement dynamic and base priority for threads
    - Charge one quantum unit each time a thread is restarted after a wait
    - Preempt thread (with preempt flag) when higher priority thread gets ready to run in mark_thread_ready()
      to force context switch when thread leaves kernel
    - Implement find_ready_thread() in sched.c
    - use preempt flag instead of dispatch in set_thread_priority()
    - check for preemption when threads are resumed
    - check for preemption when new threads are created
  
    - 3 quantum units per tick (10 ms)
    - Timeslice is 36 quantum units
    - Priority numbers from 1 to 31 (0 is idle thread)
    - Priorities 16-31 is real time priority range
    - Priorities 1-15 is dynamic priority range
    - Boosting never moves threads to the realtime range
    - Boosting is applied to the base priority
    - Dynamic priority is decreased (decayed) at each quantum expiry until it reaches base priority 
      (in preempt_thread() if the quantum has expired)

    - In win32 priority class and relative priority are mapped to priority
      
       time critical 15 (31 if realtime)
       highest       +2
       above normal  +1
       normal         0 (idle=4,normal=8,high=13,realtime=24)
       below normal  -1
       lowest        -2
       idle           1 (16 if real time)
       
       On windows 2000 and xp the relative priority can be in the range [-7;6]

 
IDEAS for new features
----------------------

- Implement SOCK_RAW socket type

- Use type object in struct object

- String substitution in inf files
    - Replace all %key% with value in [strings] section

- sysctl() functionality

- DNS resolver cache

- Dynamic DNS registration

- Test sanos with Tomcat 4

- ANSI/VT100 handler in console device

- Multiple consoles (switch consoles with ALT-<num>)

- CD-ROM atapi driver

- CDFS filesystem

- DOS boot loader

- FATFS support

- ACPI/APM support for shutdown

- Memory paging support


CHANGES
-------

- Implement /proc/uptime to display time since bootup.

- Add readline() with command line editing
    - Add command history
    - Add filename completion

- Support for .exe applications in msvcrt.dll

- Script action moved to script section in setup.exe

- Remove safety pool code in pframe.c

- Add tags to page frame database to identify memory usage
    - Add /proc/memusage

- Rename /os to /bin

- SO_BROADCAST implemented

- Map network errors with winsock errors.
    - Add all winsock errors to error table
    - Add error strings to strerror()
    - Update error codes in network code
    - Map winsock errors in wsock32.c
    - Go through each Winsock error and check net code for compliance

- Implemented main entry in libc with parseargs

- Fixed bug in TCP retransmission

- Make ne2000 driver work with WAFER.

- Return info on WSAStartup

- Moved netif binding to os.c
    - Read netif parameters from [netif] in os.ini
    - Allow static configuration of ip address and dns servers
    - Add disabled netif for all packet devices on startup
    - Add ioctl() support for changing netif parameters

- Added alloc_linear_pageframes() and alloc_pages_linear() for
  allocating linear physical memory blocks.
  
- RTL8139 network driver implemented (rtl8139.sys)

- Added PCI subsystem identifier to driver binding code.

- Implemented Intel EtherExpress Pro100 NIC network driver (eepro100.sys)

- Implemented lock count on objects
    - close object when handle count reaches zero.
    - destroy object when handle count and refcnt reaches zero.

- Buffer leak in devfs set_inode_block() fixed.

- Support for lseek() beyond end of file in dfs and smbfs.

- Bug in register_interrupt_handler() caused kernel to hang on startup. This
  problem has been fixed.
  
- Support for lba mode for hd boot in osldr

- Keyboard interrupt handling has been made more robust (failed on xpc).

- sendmsg() and recvmsg() added

*** version 1.2.4 released ***

- iomux kernel syncronization objects implemented

- select() implemented

- Support for building with Visual Studio 6.

- setjmp/longjmp moved from msvcrt to libc

- Exceptions with signal() and raise() implemented

- Revalidate partition drivers after fdisk

- Bug in FPU context handling fixed

- strftime() implemented

- Bug loading DLL with no imports fixed

- recv() call hangs when reading from a TCP socket which have been cloed by remote peer. This problem has
  been fixed. recv() now returns -ECONNRESET.

*** version 1.2.5 released ***

- iomux did not work with IOEVT_WRITE. This problem has been fixed.

- getsockname() returned garbage in sin_port and sin_addr. This problem has been fixed.

- getpeername() retunred garbage in sin_addr. This problem has been fixed.

- new HTTP server

- PE resource api

- Threads are now resceduled after setprio() to immediately reflect the new thread priority

- New sis900 network driver

- ls reported wrong size for files larger than 1GB. This problem has been fixed.

- NIC support for multicast filtering. Implemented in sis900 and rtl8139. 
  Not yet implemented in network stack.

- /dev/cmos renamed to /dev/nvram

- ether_crc() moved to src\net\ether.c

- struct stats_nic moved to include\net\stats.h

- lookup_board() implemented in dev.c

- pci_{read|write}_config_{byte|word|dword} implemeted in pci.c

- Proper handling of kernel traps. Now enters debugger with correct exception.

*** version 1.2.6 released ***

- When a file or socket object was closed the kernel object was accessed in hfree() after being freed. 
  The file and socket objects are now freed in destroy_object() to avoid this problem.

- Handles to kernel objects was not removed from the handle table if the handle count 
  was greater than one. This problem has been fixed.
  
- Closing a socket now sends a IOEVT_CLOSE event to attached iomux. This signals a select()
  on a socket to return when one of the read sockets are being closed by the application.
  
- File was marked as modified when using futime() with dfs. This was overwriting the mtime 
  for the inode when the file was closed. Now the inode is just marked dirty.

- Floppy device was not detected unless floppy disk was inserted. This problem has been fixed
  by delaying initialization of fdc until first use.

- Added queue to loopback adapter

- The yield() routine now discards the remaining quantum for the thread before yielding.

- Loopback packets to own address are now redirected in ether_output().
